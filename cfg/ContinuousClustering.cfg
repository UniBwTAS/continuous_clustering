#!/usr/bin/env python
PACKAGE = "continuous_clustering"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

general = gen.add_group("S0 General and ROS")
general.add("sensor_manufacturer", str_t, 0, "the sensor manufacturer, e.g. 'velodyne', 'ouster', 'generic_points'", "velodyne")
general.add("sensor_frame", str_t, 0, "the ROS frame id of the velodyne sensor", "sensor/lidar/vls128_roof")
general.add("odom_frame", str_t, 0, "the ROS frame id of world fixed frame approx. aligned with ground plane", "odom")
general.add("ego_robot_frame", str_t, 0, "the ROS frame id of the ego robot (required to filter points in ego bounding box)", "base_link")
general.add("wait_for_tf", bool_t, 0, "whether to wait for appropriate TF or just use the latest available", True)
general.add("is_single_threaded", bool_t, 0, "whether to use just one thread", False)

rig = gen.add_group("S1 Range Image Generation")
rig.add("num_rows", int_t, 0, "the number of rows in the range image. This should match the number of lasers.", 128, 0, 100000)
rig.add("num_columns", int_t, 0, "the number of columns for a single rotation. This should match the number of firings per rotation. So that there are only a few collisions and a few empty cells during range image generation.", 1700, 0, 100000)
rig.add("sensor_is_clockwise", bool_t, 0, "whether the sensor rotates clockwise", True)
rig.add("supplement_inclination_angle_for_nan_cells", bool_t, 0, "whether to fill NaN cells with a reasonable inclination angle, which is useful to keep the FOV small.", True)

pf = gen.add_group("S2 Point Filtering")
pf.add("ignore_points_in_chessboard_pattern", bool_t, 0, "option to to reduce the workload: ignore every second obstacle point during clustering in a chessboard pattern (this works much better than ignoring every second row or column)", True)
pf.add("ignore_points_with_too_big_inclination_angle_diff", bool_t, 0, "immediately ignore points which can't be associated to a lower point in the same column because of its combination of distance and inclination angle diff to lower laser are to high (the clustering result looks better, because these points to not result in separated clusters)", True)
pf.add("min_distance_from_sensor_origin", double_t, 0, "distance of point must be above this threshold", 1., 0, 10)
pf_fog = pf.add_group("Fog Point Filtering", type="collapse")
pf_fog.add("fog_filtering_enabled", bool_t, 0, "whether to remove fog points based on thresholds for intensity, distance, and inclination angle", False)
pf_fog.add("fog_filtering_intensity_below", int_t, 0, "intensity must be below this threshold", 2, 0, 255)
pf_fog.add("fog_filtering_distance_below", double_t, 0, "distance must be below this threshold", 18, 0, 400)
pf_fog.add("fog_filtering_inclination_above", double_t, 0, "inclination (w.r.t. ground plane) must be above this threshold", -0.06, -4.0, 4.0)

pt = gen.add_group("S3 Point Transformation")

gps = gen.add_group("S4 Ground Point Segmentation")
gps.add("max_slope", double_t, 0, "max slope between consecutive points in a row in order to be classified as ground", 0.2, 0, 2.)
gps.add("first_ring_as_ground_max_allowed_z_diff", double_t, 0, "closest ring to car: maximum allowed z difference w.r.t. predicted ground z (based on sensor height over ground)", 0.5, -1., 100)
gps.add("first_ring_as_ground_min_allowed_z_diff", double_t, 0, "closest ring to car: minimum allowed z difference w.r.t. predicted ground z (based on sensor height over ground)", -0.2, -100, 1)
gps.add("last_ground_point_slope_higher_than", double_t, 0, "Due to wet surfaces some wrong points can be below the ground plane. This threshold is used to ignore them as last ground point.", -0.1, -1., 1.)
gps.add("last_ground_point_distance_smaller_than", double_t, 0, "Due to wet surfaces some wrong points can be below the ground plane. This threshold is used to ignore them as last ground point.", 5., 0, 1000)
gps.add("ground_because_close_to_last_certain_ground_max_z_diff", double_t, 0, "yellow debug points", 0.4, 0, 2.0)
gps.add("ground_because_close_to_last_certain_ground_max_dist_diff", double_t, 0, "yellow debug points", 2.0, 0, 10)
gps.add("obstacle_because_next_certain_obstacle_max_dist_diff", double_t, 0, "dark red points", 0.3, 0, 1)

a = gen.add_group("S5 Association")
a.add("max_distance", double_t, 0, "maximum distance of two points to be clustered together (a higher distance means a larger workload)", 0.7, 0.01, 5.)
a.add("max_steps_in_row", int_t, 0, "option to to reduce the workload: maximum number of steps searching for close enough neighbors in row", 20, 0, 3000)
a.add("max_steps_in_column", int_t, 0, "option to to reduce the workload: maximum number of steps searching for close enough neighbors in column", 20, 0, 3000)
a.add("stop_after_association_enabled", bool_t, 0, "option to to reduce the workload: whether to stop after the point was successfully associated (normally search is continued to search for other trees)", True)
a.add("stop_after_association_min_steps", int_t, 0, "option to to reduce the workload: this value (v) represents the minimum rectangle (width: v, height: v * 2 + 1) around current point to process even if point was already associated", 1, 0, 3000)

cd = gen.add_group("S6 Cluster Detection")

pc = gen.add_group("S7 Point Collection")
pc.add("use_last_point_for_cluster_stamp", bool_t, 0, "whether to use the latest stamp of all points in the cluster as cluster stamp or the middle between oldest and latest stamp. This should be typically disabled and is only useful to measure the cluster' latency.", False)

exit(gen.generate(PACKAGE, "continuous_clustering_node", "ContinuousClustering"))
