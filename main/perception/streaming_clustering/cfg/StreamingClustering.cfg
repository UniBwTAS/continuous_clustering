#!/usr/bin/env python
PACKAGE = "streaming_clustering"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gps = gen.add_group("Ground Point Segmentation", type="tab")
gps.add("max_slope", double_t, 0, "max slope between consecutive points in a row in order to be classified as ground", 0.2, 0, 2.)
gps_crtc = gps.add_group("Closest ring to car", type="")
gps_crtc.add("first_ring_as_ground_max_allowed_z_diff", double_t, 0, "closest ring to car: maximum allowed z difference w.r.t. predicted ground z (based on sensor height over ground)", 0.5, -1., 100)
gps_crtc.add("first_ring_as_ground_min_allowed_z_diff", double_t, 0, "closest ring to car: minimum allowed z difference w.r.t. predicted ground z (based on sensor height over ground)", -0.2, -100, 1)
gps_fog = gps.add_group("Try to filter points in fog", type="")
gps_fog.add("fog_filtering_enabled", bool_t, 0, "whether to remove fog points based on thresholds for intensity, distance, and inclination angle", False)
gps_fog.add("fog_filtering_intensity_below", int_t, 0, "intensity must be below this threshold", 2, 0, 255)
gps_fog.add("fog_filtering_distance_below", double_t, 0, "distance must be below this threshold", 18, 0, 400)
gps_fog.add("fog_filtering_inclination_above", double_t, 0, "inclination (w.r.t. ground plane) must be above this threshold", -0.06, -4.0, 4.0)
gps_ter = gps.add_group("Labeling by terrain", type="")
gps_ter.add("terrain_max_allowed_z_diff", double_t, 0, "if the difference between terrain cell and point's z is smaller then it is labeled as ground point", 0.4, 0.0, 3.0)
gps_advanced = gps.add_group("Advanced", type="collapse")
gps_advanced.add("last_ground_point_slope_higher_than", double_t, 0, "Due to wet surfaces some wrong points can be below the ground plane. This threshold is used to ignore them as last ground point.", -0.1, -1., 1.)
gps_advanced.add("last_ground_point_distance_smaller_than", double_t, 0, "Due to wet surfaces some wrong points can be below the ground plane. This threshold is used to ignore them as last ground point.", 5., 0, 1000)
gps_advanced.add("ground_because_close_to_last_certain_ground_max_z_diff", double_t, 0, "yellow debug points", 0.4, 0, 2.0)
gps_advanced.add("ground_because_close_to_last_certain_ground_max_dist_diff", double_t, 0, "yellow debug points", 2.0, 0, 10)
gps_advanced.add("obstacle_because_next_certain_obstacle_max_dist_diff", double_t, 0, "dark red points", 0.3, 0, 1)

c = gen.add_group("Clustering", type="tab")
c.add("max_distance", double_t, 0, "maximum distance of two points to be clustered together (a higher distance means a larger workload)", 0.7, 0.01, 5.)
c.add("max_steps_in_row", int_t, 0, "option to to reduce the workload: maximum number of steps searching for close enough neighbors in row", 20, 0, 3000)
c.add("max_steps_in_column", int_t, 0, "option to to reduce the workload: maximum number of steps searching for close enough neighbors in column", 20, 0, 3000)
c.add("stop_after_association_enabled", bool_t, 0, "option to to reduce the workload: whether to stop after the point was successfully associated (normally search is continued to search for other trees)", True)
c.add("stop_after_association_min_steps", int_t, 0, "option to to reduce the workload: this value (v) represents the minimum rectangle (width: v, height: v * 2 + 1) around current point to process even if point was already associated", 1, 0, 3000)
c.add("ignore_points_in_chessboard_pattern", bool_t, 0, "option to to reduce the workload: ignore every second obstacle point during clustering in a chessboard pattern (this works much better than ignoring every second row or column)", True)
c.add("ignore_points_with_too_big_inclination_angle_diff", bool_t, 0, "immediately ignore points which can't be associated to a lower point in the same column because of its combination of distance and inclination angle diff to lower laser are to high (the clustering result looks better, because these points to not result in separated clusters)", True)

exit(gen.generate(PACKAGE, "streaming_clustering_node", "StreamingClustering"))
